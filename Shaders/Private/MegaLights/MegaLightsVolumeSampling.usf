// Copyright Epic Games, Inc. All Rights Reserved.

// When loading SSS checkerboard pixel, do not adjust DiffuseColor/SpecularColor to preserve specular and diffuse lighting values for each pixel
#define ALLOW_SSS_MATERIAL_OVERRIDE 0

#include "../Common.ush"
#include "../BlueNoise.ush"
#include "MegaLights.ush"
#include "MegaLightsVolume.ush"
#include "MegaLightsRayTracing.ush"

uint VolumeDebugMode;
int VolumeDebugSliceIndex;
float3 VolumeFrameJitterOffset;
uint3 NumSamplesPerVoxel;
float VolumeMinSampleWeight;
uint3 DownsampledVolumeViewSize;
float VolumeInverseSquaredLightDistanceBiasScale;
uint DebugLightId;

RWTexture3D<uint> RWVolumeLightSamples;

uint3 GetSampleCoord(uint3 DownsampledVolumeCoord, uint LightSampleIndex)
{
	return DownsampledVolumeCoord * NumSamplesPerVoxel + uint3(LightSampleIndex % NUM_SAMPLES_PER_VOXEL_3D_X, LightSampleIndex / NUM_SAMPLES_PER_VOXEL_3D_X, 0);
}

struct FLightSampler
{
	float LightIndexRandom[NUM_SAMPLES_PER_VOXEL_1D];
	FLightSample LightSamples[NUM_SAMPLES_PER_VOXEL_1D];
	float WeightSum;
};

void SampleLight(float3 TranslatedWorldPosition, float3 CameraVector, float DistanceBiasSqr, float LightVolumetricSoftFadeDistance, uint LocalLightIndex, inout FLightSampler LightSampler, inout FDebug Debug)
{
	const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LocalLightIndex);
	const FDeferredLightData LightData = ConvertToDeferredLight(LocalLightData);

	checkSlow(LocalLightData.bMegaLightsSupported);
		
	float3 LightScattering = GetMegaLightsVolumeLighting(TranslatedWorldPosition, CameraVector, DistanceBiasSqr, LightVolumetricSoftFadeDistance, LocalLightData, LightData) * View.PreExposure;
	float SampleWeight = log2(Luminance(LightScattering) + 1.0f);
				
	#if DEBUG_MODE
	if (Debug.bActive)
	{
		Newline(Debug.Context);
		Print(Debug.Context, LocalLightData.LightSceneId, Select(LocalLightData.LightSceneId == DebugLightId, FontSelected, FontValue));
		Print(Debug.Context, LocalLightIndex, Select(LocalLightData.LightSceneId == DebugLightId, FontSelected, FontValue));
		Print(Debug.Context, SampleWeight);
	}
	#endif

	if (SampleWeight > VolumeMinSampleWeight)
	{
		float Tau = LightSampler.WeightSum / (LightSampler.WeightSum + SampleWeight);
		LightSampler.WeightSum += SampleWeight;

		for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
		{
			if (LightSampler.LightIndexRandom[LightSampleIndex] < Tau)
			{
				LightSampler.LightIndexRandom[LightSampleIndex] /= Tau;
			}
			else
			{
				// Select this sample
				LightSampler.LightIndexRandom[LightSampleIndex] = (LightSampler.LightIndexRandom[LightSampleIndex] - Tau) / (1.0f - Tau);
				LightSampler.LightSamples[LightSampleIndex].LocalLightIndex = LocalLightIndex;
				LightSampler.LightSamples[LightSampleIndex].Weight = SampleWeight;
			}

			LightSampler.LightIndexRandom[LightSampleIndex] = clamp(LightSampler.LightIndexRandom[LightSampleIndex], 0, 0.9999f);
		}
	}
}

/**
 * Run one thread per sample and generate new light samples for tracing
 */
[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, THREADGROUP_SIZE)]
void VolumeGenerateLightSamplesCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const uint3 DownsampledVolumeCoord = DispatchThreadId.xyz;
	if (all(DownsampledVolumeCoord < DownsampledVolumeViewSize))
	{
		FDebug Debug;
		#if DEBUG_MODE
		{
			int2 DebugScreenCoord = GetDebugScreenCoord();
			Debug.bActive = all(DownsampledVolumeCoord == int3(DebugScreenCoord >> MegaLightsVolumePixelSizeShift, VolumeDebugSliceIndex) / DOWNSAMPLE_FACTOR);
			Debug.Context = InitShaderPrintContext(true, float2(0.05, 0.05));
		}
		#endif

		const uint3 VolumeCoord = DownsampledVolumeCoordToVolumeCoord(DownsampledVolumeCoord);
		if (IsFroxelVisible(VolumeCoord))
		{
			float SceneDepth;
			const float3 TranslatedWorldPosition = ComputeCellTranslatedWorldPosition(VolumeCoord, VolumeFrameJitterOffset, SceneDepth);
			const float3 CameraVector = normalize(TranslatedWorldPosition - View.TranslatedWorldCameraOrigin);

			float SceneDepth2 = 0.0f;
			float SceneDepth3 = 0.0f;
			float CellRadius = length(TranslatedWorldPosition - ComputeCellTranslatedWorldPosition(VolumeCoord + uint3(1, 1, 1), VolumeFrameJitterOffset, SceneDepth2));
			float Cell2DRadius = length(TranslatedWorldPosition - ComputeCellTranslatedWorldPosition(VolumeCoord + uint3(1, 1, 0), VolumeFrameJitterOffset, SceneDepth3));
			float LightVolumetricSoftFadeDistance = LightSoftFading * Cell2DRadius;
			// Bias the inverse squared light falloff based on voxel size to prevent aliasing near the light source
			float DistanceBiasSqr = max(CellRadius * VolumeInverseSquaredLightDistanceBiasScale, 1);
			DistanceBiasSqr *= DistanceBiasSqr;

			#if DEBUG_MODE
			if (Debug.bActive)
			{
				Print(Debug.Context, TEXT("VolumeGenerateLightSamples"));
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("Coord: "));
				Print(Debug.Context, DownsampledVolumeCoord);
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("TWS: "));
				Print(Debug.Context, TranslatedWorldPosition);
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("DebugLightId: "));
				Print(Debug.Context, DebugLightId);

				AddCrossTWS(Debug.Context, TranslatedWorldPosition, 5.0f, float4(1, 0, 0, 1));

				Newline(Debug.Context);
				Print(Debug.Context, TEXT("LightId | LocalLightId | Weight"));
			}
			#endif

			FLightSampler LightSampler;
			LightSampler.WeightSum = 0.0f;
			for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
			{
				LightSampler.LightSamples[LightSampleIndex] = InitLightSample();
			}

			// Initialize random variables using Fast Blue Noise
			{
				float RandomScalar = BlueNoiseScalar(VolumeCoordToNoiseCoord(DownsampledVolumeCoord), MegaLightsStateFrameIndex);
				for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
				{
					LightSampler.LightIndexRandom[LightSampleIndex] = (RandomScalar + LightSampleIndex) / NUM_SAMPLES_PER_VOXEL_1D;
				}
			}

			#if DEBUG_MODE
			if (Debug.bActive)
			{
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("NoiseCoord: "));
				Newline(Debug.Context);
				Print(Debug.Context, DownsampledVolumeCoord);
				Newline(Debug.Context);
				Print(Debug.Context, VolumeCoordToNoiseCoord(DownsampledVolumeCoord));
			}
			#endif

			const uint EyeIndex = 0;
			const uint GridIndex = ComputeLightGridCellIndex(VolumeCoord.xy * MegaLightsVolumePixelSize, SceneDepth, EyeIndex);
			const FCulledLightsGridHeader CulledLightsGridHeader = GetCulledLightsGridHeader(GridIndex, EyeIndex);
			const uint NumLightsInGridCell = min(CulledLightsGridHeader.NumMegaLights, GetMaxLightsPerCell(EyeIndex));

			const uint ScalarGridIndex = WaveReadLaneFirst(GridIndex);
			const bool bScalarGridCell = WaveActiveAllTrue(ScalarGridIndex == GridIndex);

			if (bScalarGridCell)
			{
				const FCulledLightsGridHeader CulledLightsGridHeader = GetCulledLightsGridHeader(ScalarGridIndex, EyeIndex);
				const uint NumLightsInGridCell = min(CulledLightsGridHeader.NumMegaLights, GetMaxLightsPerCell(EyeIndex));

				uint GridLightIndex = 0;
				while(GridLightIndex < NumLightsInGridCell)
				{
					uint LocalLightIndex = GetCulledLightDataGrid(CulledLightsGridHeader.MegaLightsDataStartIndex + GridLightIndex);
					if (LocalLightIndex >= MAX_LOCAL_LIGHT_INDEX)
					{
						break;
					}
						
					++GridLightIndex;
					SampleLight(TranslatedWorldPosition, CameraVector, DistanceBiasSqr, LightVolumetricSoftFadeDistance, LocalLightIndex, LightSampler, Debug);
				}
			}
			else
			{
				uint GridLightIndex = 0;
				while(GridLightIndex < NumLightsInGridCell)
				{
					const uint VectorLocalLightIndex = GetCulledLightDataGrid(CulledLightsGridHeader.MegaLightsDataStartIndex + GridLightIndex);
					if (VectorLocalLightIndex >= MAX_LOCAL_LIGHT_INDEX)
					{
						break;
					}

					uint LocalLightIndex = WaveActiveMin(VectorLocalLightIndex);
					if (LocalLightIndex == VectorLocalLightIndex)
					{
						++GridLightIndex;
						SampleLight(TranslatedWorldPosition, CameraVector, DistanceBiasSqr, LightVolumetricSoftFadeDistance, LocalLightIndex, LightSampler, Debug);
					}
				}
			}

			#if DEBUG_MODE
			if (Debug.bActive)
			{
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("Weight sum: "));
				Print(Debug.Context, LightSampler.WeightSum);
				Newline(Debug.Context);
				Print(Debug.Context, TEXT("Selected lights: "));

				for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
				{
					FLightSample LightSample = LightSampler.LightSamples[LightSampleIndex];
						
					Newline(Debug.Context);
					Print(Debug.Context, LightSample.LocalLightIndex); 
					Print(Debug.Context, LightSample.Weight);

					if (VolumeDebugMode == DEBUG_MODE_VISUALIZE_SAMPLING)
					{
						const uint3 SampleCoord = GetSampleCoord(DownsampledVolumeCoord, LightSampleIndex);

						const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LightSample.LocalLightIndex);
						const float2 LightSampleUV = BlueNoiseVec2(VolumeCoordToNoiseCoord(SampleCoord), MegaLightsStateFrameIndex);
						const FLightSampleTrace LightSampleTrace = GetLightSampleTrace(TranslatedWorldPosition, LightSample.LocalLightIndex, LightSampleUV);

						AddLineTWS(Debug.Context, TranslatedWorldPosition, TranslatedWorldPosition + LightSampleTrace.Direction * LightSampleTrace.Distance, float4(LocalLightData.LightColorAndIdAndFalloffExponent.xyz / Luminance(LocalLightData.LightColorAndIdAndFalloffExponent.xyz), 1.0f));
					}
				}
			}
			#endif

			for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
			{
				FLightSample LightSample = LightSampler.LightSamples[LightSampleIndex];

				if (LightSample.LocalLightIndex != MAX_LOCAL_LIGHT_INDEX)
				{
					const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LightSample.LocalLightIndex);
					const bool bCastShadows = UnpackCastShadow(asuint(LocalLightData.LightDirectionAndShadowMask.w));

					LightSample.bVisible = true;
					LightSample.bCompleted = bCastShadows ? false : true;
					LightSample.Weight = LightSampler.WeightSum / (NUM_SAMPLES_PER_VOXEL_1D * LightSample.Weight);
				}

				RWVolumeLightSamples[GetSampleCoord(DownsampledVolumeCoord, LightSampleIndex)] = PackLightSample(LightSample);
			}
		}
		else
		{
			for (uint LightSampleIndex = 0; LightSampleIndex < NUM_SAMPLES_PER_VOXEL_1D; ++LightSampleIndex)
			{
				FLightSample LightSample = InitLightSample();
				RWVolumeLightSamples[GetSampleCoord(DownsampledVolumeCoord, LightSampleIndex)] = PackLightSample(LightSample);
			}
		}
	}
}