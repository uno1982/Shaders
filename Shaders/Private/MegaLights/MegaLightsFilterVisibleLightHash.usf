// Copyright Epic Games, Inc. All Rights Reserved.

#ifndef NUM_SAMPLES_PER_PIXEL_1D
	#define NUM_SAMPLES_PER_PIXEL_1D 1
	#define NUM_SAMPLES_PER_PIXEL_2D_X 1
	#define NUM_SAMPLES_PER_PIXEL_2D_Y 1
#endif

#include "../Common.ush"
#include "MegaLights.ush"

StructuredBuffer<uint> VisibleLightHashBuffer;
StructuredBuffer<uint> VisibleLightMaskHashBuffer;
uint2 VisibleLightHashViewSizeInTiles;

RWStructuredBuffer<uint> RWVisibleLightHash;
RWStructuredBuffer<uint> RWVisibleLightMaskHash;

void AppendVisibleLightHash(uint2 BaseTileCoord, int2 TileOffset, inout uint VisibleLightHash[VISIBLE_LIGHT_HASH_SIZE], inout uint VisibleLightMaskHash[VISIBLE_LIGHT_HASH_SIZE])
{
	int2 TileCoord = BaseTileCoord + TileOffset;

	if (all(TileCoord >= 0) && all(TileCoord < (int2)VisibleLightHashViewSizeInTiles))
	{
		uint LightHashBufferBase = VISIBLE_LIGHT_HASH_SIZE * (TileCoord.y * VisibleLightHashViewSizeInTiles.x + TileCoord.x);
		for (uint IndexInHash = 0; IndexInHash < VISIBLE_LIGHT_HASH_SIZE; ++IndexInHash)
		{
			VisibleLightHash[IndexInHash] |= VisibleLightHashBuffer[LightHashBufferBase + IndexInHash];
			VisibleLightMaskHash[IndexInHash] |= VisibleLightMaskHashBuffer[LightHashBufferBase + IndexInHash];
		}
	}
}

/**
 * Propagate visible light data by merging neighboring tiles.
 */
[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void FilterVisibleLightHashCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 TileCoord = DispatchThreadId.xy;

	if (all(TileCoord >= 0) && all(TileCoord < VisibleLightHashViewSizeInTiles))
	{
		uint VisibleLightHash[VISIBLE_LIGHT_HASH_SIZE];
		uint VisibleLightMaskHash[VISIBLE_LIGHT_HASH_SIZE];
		for (uint IndexInHash = 0; IndexInHash < VISIBLE_LIGHT_HASH_SIZE; ++IndexInHash)
		{
			VisibleLightHash[IndexInHash] = 0;
			VisibleLightMaskHash[IndexInHash] = 0;
		}

		AppendVisibleLightHash(TileCoord, int2(0, 0), VisibleLightHash, VisibleLightMaskHash);
		AppendVisibleLightHash(TileCoord, int2(+1, 0), VisibleLightHash, VisibleLightMaskHash);
		AppendVisibleLightHash(TileCoord, int2(-1, 0), VisibleLightHash, VisibleLightMaskHash);
		AppendVisibleLightHash(TileCoord, int2(0, +1), VisibleLightHash, VisibleLightMaskHash);
		AppendVisibleLightHash(TileCoord, int2(0, -1), VisibleLightHash, VisibleLightMaskHash);

		for (uint IndexInHash = 0; IndexInHash < VISIBLE_LIGHT_HASH_SIZE; ++IndexInHash)
		{
			uint LightHashBufferBase = VISIBLE_LIGHT_HASH_SIZE * (TileCoord.y * VisibleLightHashViewSizeInTiles.x + TileCoord.x);
			RWVisibleLightHash[LightHashBufferBase + IndexInHash] = VisibleLightHash[IndexInHash];
			RWVisibleLightMaskHash[LightHashBufferBase + IndexInHash] = VisibleLightMaskHash[IndexInHash];
		}
	}
}