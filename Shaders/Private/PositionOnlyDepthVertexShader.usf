// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PositionOnlyDepthOnlyVertexShader.hlsl: Depth-only vertex shader.
=============================================================================*/

#include "Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

void Main(
	FPositionOnlyVertexFactoryInput Input,
	out INVARIANT_OUTPUT float4 OutPosition : SV_POSITION
#if USE_GLOBAL_CLIP_PLANE
	, out float OutGlobalClipPlaneDistance : SV_ClipDistance
#endif
#if INSTANCED_STEREO
	, out uint ViewportIndex : SV_ViewPortArrayIndex
#endif
// BEGIN META SECTION - Multi-View CustomDepth support
#if USE_MULTI_VIEW_ID_SV
	, in uint ViewId : SV_ViewID
#endif
// END META SECTION - Multi-View CustomDepth support
	)
{
#if INSTANCED_STEREO
	const uint EyeIndex = GetEyeIndexFromVF(Input);
	ViewportIndex = EyeIndex;
#endif
	// BEGIN META SECTION - Multi-View CustomDepth support
#if USE_MULTI_VIEW_ID_SV
	ResolvedView = ResolveView(ViewId);
#else
	ResolvedView = ResolveViewFromVF(Input);
#endif

	float4 WorldPos = VertexFactoryGetWorldPosition(Input);

	{
		OutPosition = INVARIANT(mul(WorldPos, ResolvedView.TranslatedWorldToClip));
	}

#if USE_GLOBAL_CLIP_PLANE
	OutGlobalClipPlaneDistance = dot(ResolvedView.GlobalClippingPlane, float4(WorldPos.xyz, 1));
#endif
}
